// From 2.2 Program Outline in Program 2
// NOTE: I am showing the steps to writing Program 2
//       Step 5:
//       On Assignment 2, page 3, it was recommended that this outline can help
//       The following code was given to all students in the Lecture 2.2
// From reading 2.2, I am collecting specs and information for the program

// Create all connections in graph
while (IsGraphFull() == false)
{
AddRandomConnection();
}
// Returns true if all rooms have 3 to 6 outbound connections, false otherwise
bool IsGraphFull()
{
...
}
// Adds a random, valid outbound connection from a Room to another Room
void AddRandomConnection()
{
Room A; // Maybe a struct, maybe global arrays of ints
Room B;
while(true)
{
A = GetRandomRoom();
if (CanAddConnectionFrom(A) == true)
break;
}
do
{
B = GetRandomRoom();
}
while(CanAddConnectionFrom(B) == false || IsSameRoom(A, B) == true || ConnectionAlreadyExists(A, B) == tru
e);
ConnectRoom(A, B); // TODO: Add this connection to the real variables,
ConnectRoom(B, A); // because this A and B will be destroyed when this function terminates
}
// Returns a random Room, does NOT validate if connection can be added
Room GetRandomRoom()
{
...
}
// Returns true if a connection can be added from Room x (< 6 outbound connections), false otherwise
bool CanAddConnectionFrom(Room x)
{
...
}
// Returns true if a connection from Room x to Room y already exists, false otherwise
bool ConnectionAlreadyExists(x, y)
{
...
}
// Connects Rooms x and y together, does not check if this connection is valid
void ConnectRoom(Room x, Room y)
{
...
}
// Returns true if Rooms x and y are the same Room, false otherwise
bool IsSameRoom(Room x, Room y)
{
...
}
